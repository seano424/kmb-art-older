"use strict";

var enc = encodeURIComponent;
var apiHost = 'api.sanity.io';
var cdnHost = 'apicdn.sanity.io';

function PicoSanity(config, fetcher) {
  if (!(this instanceof PicoSanity)) {
    return new PicoSanity(config);
  }

  this.clientConfig = config;
  this.fetcher = fetcher;
}

;
['clone', 'create', 'createIfNotExists', 'createOrReplace', 'delete', 'listen', 'mutate', 'patch', 'transaction'].forEach(function (method) {
  PicoSanity.prototype[method] = ni(method);
});

PicoSanity.prototype.config = function (cfg) {
  if (cfg) {
    this.clientConfig = Object.assign({}, this.clientConfig, cfg);
    return this;
  }

  return this.clientConfig;
};

PicoSanity.prototype.fetch = function (query, params) {
  var cfg = this.clientConfig;
  var headers = cfg.token ? {
    Authorization: "Bearer ".concat(cfg.token)
  } : undefined;
  var host = !cfg.useCdn || cfg.token ? apiHost : cdnHost;
  var version = cfg.apiVersion ? "v".concat(cfg.apiVersion.replace(/^v/, '')) : 'v1';
  var opts = {
    credentials: cfg.withCredentials ? 'include' : 'omit',
    headers: headers
  };
  var qs = getQs(query, params);
  return this.fetcher("https://".concat(cfg.projectId, ".").concat(host, "/").concat(version, "/data/query/").concat(cfg.dataset).concat(qs), opts).then(parse);
};

function parse(res) {
  return res.json().then(function (json) {
    if (res.status < 400) {
      return json.result;
    }

    var msg = res.url;
    var type = res.statusText;

    if (json.error && json.error.description) {
      msg = json.error.description;
      type = json.error.type || type;
    }

    throw new Error("HTTP ".concat(res.status, " ").concat(type, ": ").concat(msg));
  });
}

function getQs(query, params) {
  var baseQs = "?query=".concat(enc(query));
  return Object.keys(params || {}).reduce(function (current, param) {
    return "".concat(current, "&").concat(enc("$".concat(param)), "=").concat(enc(JSON.stringify(params[param])));
  }, baseQs);
}

function ni(method) {
  return function () {
    throw new Error("Method \"".concat(method, "\" not implemented, use @sanity/client"));
  };
}

module.exports = PicoSanity;